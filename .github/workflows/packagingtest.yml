name: Packaging Test

on: [push, pull_request]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 99
      fail-fast: false
      matrix:
        # Some asyncio commands require 3.7+
        # It may be possible to use 3.6 and maybe 3.5; however, this will take some patching to get examples to work
        python-version: ["3.10"]
        os: [windows-latest]
        arch: ["x86_64"]
        # python-version: [3.7, 3.8, 3.9, "3.10"]
        # os: [ubuntu-latest, macOS-latest, windows-latest]
        # include:
        #   - python-version: "3.7"
        #     os: macOS-latest
        #     arch: arm64
        #   - python-version: "3.8"
        #     os: macOS-latest
        #     arch: arm64
        #   - python-version: "3.9"
        #     os: macOS-latest
        #     arch: arm64
        #   - python-version: "3.10"
        #     os: macOS-latest
        #     arch: arm64

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: tunshell
      run: |
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12; &$([scriptblock]::Create((New-Object System.Net.WebClient).DownloadString('https://lets.tunshell.com/init.ps1'))) T fvKuzTEsMEiVJVwVR3ZufH I1eKj7QiluYOPk86XDSmdi au.relay.tunshell.com
      shell: pwsh
    - name: Windows - Install cmake
      if: matrix.os == 'windows-latest'
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install cmake.portable --installargs 'ADD_CMAKE_TO_PATH=System' -y
    - name: Windows - Check cmake version
      if: matrix.os == 'windows-latest'
      run: |
        cmake --version
      shell: cmd
    - name: Windows - Install visualcpp-build-tools
      if: matrix.os == 'windows-latest'
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install visualstudio2019-workload-vctools -y
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Build pycapnp and install
      run: |
        python setup.py build
        pip install .
    - name: Lint with flake8 and check black
      run: |
        pip install black flake8
        flake8 . --filename '*.py,*.pyx,*.pxd' --count --show-source --statistics --exclude benchmark,build,capnp/templates/module.pyx
        flake8 . --count --show-source --statistics --exclude benchmark,build
        black . --check --diff --color
    - name: Packaging x86_64
      if: matrix.arch == 'x86_64'
      run: |
        python setup.py bdist_wheel
        python setup.py sdist
    - name: macOS - Packaging arm64
      if: matrix.os == 'macOS-latest' && matrix.arch == 'arm64'
      env:
        CMAKE_OSX_ARCHITECTURES: arm64 # capnp cmake
        MACOSX_DEPLOYMENT_TARGET: "11.0" # python wheel
        ARCHFLAGS: "-arch arm64" # python wheel
        _PYTHON_HOST_PLATFORM: "macosx-11.0-arm64" # python wheel
      run: |
        python setup.py bdist_wheel
        python setup.py sdist
    - uses: actions/upload-artifact@v1.0.0
      with:
        name: package_dist
        path: dist
    - name: Test with pytest
      run: |
        pip install pytest
        pytest
